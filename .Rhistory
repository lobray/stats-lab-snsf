library(lubridate)
### Make a copy of data & rename it
apps <- applications # make copy of applications
external_reviews <- reviews # make copy
internal_reviews <- referee_grades # make copy
### Convert categorical variables to factors
external_reviews$Gender<-as.factor(external_reviews$Gender) # Gender
external_reviews$OverallGrade<-as.factor(external_reviews$OverallGrade) #OverallGrade
external_reviews$QuestionRating<-as.factor(external_reviews$QuestionRating) #QuestionRating
external_reviews$SourcePerson<-as.factor(external_reviews$SourcePerson) #Source Person -- Who suggested the reviewer?
### Fix obvious data errors: QuestionRating
id <- which(external_reviews$QuestionRating=="-outstanding")
external_reviews$QuestionRating[id]<-"outstanding"
### Clean up external data, and prepare it to be merged internal data
aa_proj_id <- which(duplicated(external_reviews$ProjectID)) # identify duplicate project id
unique_external_reviews <- external_reviews[-aa_proj_id,] # make new data frame removing project id
unique_external_reviews$Question <- rep("OverallGrade", dim(unique_external_reviews)[1]) # input OverallGrade as a Question
unique_external_reviews$QuestionRating <- unique_external_reviews$OverallGrade # input OverallGrade rating into QuestionRating
unique_external_reviews <- unique_external_reviews[,-c(3)] # remove "OverallGrade" column
print(length(unique_external_reviews$ProjectID))
external_reviews <- external_reviews[,-3] # remove "OverallGrade" column from original data
external_reviews <- rbind(external_reviews, unique_external_reviews) # rejoin data
colnames(external_reviews)[4] <- "ReviewerGender" # Rename gender as ReviewerGender
colnames(external_reviews)[5] <- "ReviewerCountry" # specify country as ReviewerCountry
external_reviews$ReviewerType <- rep("External", dim(external_reviews)[1]) # add in reviewer type
external_reviews$RefereeRole <- NA
# external_reviews$RefereeRole <- "External Reviewer" # add in columns from referee - LESLIE commented thi out because I think this variable refers to something different
external_reviews <- external_reviews[,c("ProjectID", "Question", "QuestionRating", "ReviewerGender", "ReviewerID", "ReviewerType", "ReviewID", "RefereeRole", "SourcePerson",
"ReviewerCountry", "EmailEnding")] # align order with referees
### A few lines to try to get Reviewers Country from EmailEnding
IsoCountry <- ISO_3166_1[,c("Alpha_2","Name")]  #UK Is not in this data Set
IsoCountry <- rbind(IsoCountry, c(Alpha_2="UK", Name="Great Britain and Northern Ireland"))
# Using Emailending to set Country
external_reviews$EmailEnding<-toupper(external_reviews$EmailEnding)
for (i in IsoCountry$Alpha_2){ #There are some endings (.com, .edu, .. That I left with NA's)
id <- which(str_detect(external_reviews$EmailEnding,i)&is.na(external_reviews$ReviewerCountry))
id_iso <- which(str_detect(IsoCountry$Alpha_2,i)==1)
name <- IsoCountry[id_iso,2]
external_reviews$ReviewerCountry[id]<-name
}
### Clean internal reviewer data, and prepare it to be merged with external reviews data
bb_proj_id <- which(duplicated(internal_reviews$ProjectID)) # identify unique project id
unique_internal_reviews <- internal_reviews[-bb_proj_id,] # make new data frame with unique project id
unique_internal_reviews$Question <- rep("OverallComparativeRanking", dim(unique_internal_reviews)[1]) # input overall grade as a normal question
unique_internal_reviews$QuestionRating <- unique_internal_reviews$OverallComparativeRanking # input rating from overall comparative grade into the questionrating column
internal_reviews <- rbind(internal_reviews, unique_internal_reviews) # rejoin data
internal_reviews <- internal_reviews[,-3] # remove overall comparative ranking column
colnames(internal_reviews)[4] <- "ReviewerGender" # update gender to specify reviewer gender
internal_reviews$ReviewerType <- rep("Internal", dim(internal_reviews)[1]) # add in reviewer type
colnames(internal_reviews)[6] <- "ReviewerID" # rename "RefereeID" to "ReviewerID" to align with external reviewer nomenclature
colnames(internal_reviews)[7] <- "ReviewID" # rename "RefereeRecommendationID" to "ReviewerID" to align with external reviewer naming
internal_reviews$SourcePerson <- "Not Applicable" # add in columns from reviews
internal_reviews$ReviewerCountry <- "Not Applicable" # add in columns from reviews
internal_reviews$EmailEnding <- "Not Applicable" # add in columns from reviews
internal_reviews <- internal_reviews[,c("ProjectID", "Question", "QuestionRating", "ReviewerGender", "ReviewerID", "ReviewerType", "ReviewID", "RefereeRole", "SourcePerson",
"ReviewerCountry", "EmailEnding")] # align column ordering with reviews
## Now merge reviews and referee data
full_review_profile <- rbind(external_reviews, internal_reviews) # combine two review sources
## Some variable change in the applications
#Set `NA` to zero in granted when approved = 0
id<-(is.na(apps$AmountGranted)&apps$IsApproved==0)
apps$AmountGranted[id]<-0
#For Approvals
apps$IsApproved<-as.factor(apps$IsApproved)
#For Gender
apps$Gender<-as.factor(apps$Gender)
#Date
apps$CallEndDate<-ymd(apps$CallEndDate)
colnames(apps)[colnames(apps)=="CallEndDate"]<- "Year"
#For Division
apps$Division<-as.factor(apps$Division)
#Applicant Academic age at submission. Starting on 2016-10-01 to be accounted for
colnames(apps)[colnames(apps)=="ResponsibleApplicantAcademicAgeAtSubmission"]<-"AcademicAge"
#Applicant age at submission
colnames(apps)[colnames(apps)=="ResponsibleApplicantAgeAtSubmission"]<-"Age"
#Professorship
colnames(apps)[colnames(apps)=="ResponsibleApplicantProfessorshipType"]<- "Professorship"
apps$Professorship<-as.factor(apps$Professorship)
#Continuation
apps$IsContinuation<-as.factor(apps$IsContinuation)
#Previous project Request
colnames(apps)[colnames(apps)=="IsHasPreviousProjectRequested"]<-"PreviousRequest"
apps$PreviousRequest<-as.factor(apps$PreviousRequest)
#Institution
apps$InstType<-as.factor(apps$InstType)
## Merge with application information, and restrict to just 2016 data
testing_merge <- merge(full_review_profile, apps, by="ProjectID") # merges everything into one!
merged_2016<- subset(testing_merge,year(testing_merge$Year)==2016)
return(merged_2016)
}
combined <- merge_snsf_data_2016(applications = applications, reviews = reviews, referee_grades = referee_grades)
length(unique(applications[applications[,"CallEndDate"]=="2016-10-01","ProjectID"]))
length(unique(applications[applications[,"CallEndDate"]=="2016-04-01","ProjectID"]))
981+762
View(external_reviews)
merge_snsf_data_2016 <- function(applications, reviews, referee_grades) {
library(ISOcodes)
library(stringr)
library(lubridate)
### Make a copy of data & rename it
apps <- applications # make copy of applications
external_reviews <- reviews # make copy
internal_reviews <- referee_grades # make copy
### Convert categorical variables to factors
external_reviews$Gender<-as.factor(external_reviews$Gender) # Gender
external_reviews$OverallGrade<-as.factor(external_reviews$OverallGrade) #OverallGrade
external_reviews$QuestionRating<-as.factor(external_reviews$QuestionRating) #QuestionRating
external_reviews$SourcePerson<-as.factor(external_reviews$SourcePerson) #Source Person -- Who suggested the reviewer?
### Fix obvious data errors: QuestionRating
id <- which(external_reviews$QuestionRating=="-outstanding")
external_reviews$QuestionRating[id]<-"outstanding"
### Clean up external data, and prepare it to be merged internal data
aa_proj_id <- which(duplicated(external_reviews$ProjectID)) # identify duplicate project id
unique_external_reviews <- external_reviews[-aa_proj_id,] # make new data frame removing project id
unique_external_reviews$Question <- rep("OverallGrade", dim(unique_external_reviews)[1]) # input OverallGrade as a Question
unique_external_reviews$QuestionRating <- unique_external_reviews$OverallGrade # input OverallGrade rating into QuestionRating
unique_external_reviews <- unique_external_reviews[,-c(3)] # remove "OverallGrade" column
external_reviews <- external_reviews[,-3] # remove "OverallGrade" column from original data
external_reviews <- rbind(external_reviews, unique_external_reviews) # rejoin data
colnames(external_reviews)[4] <- "ReviewerGender" # Rename gender as ReviewerGender
colnames(external_reviews)[5] <- "ReviewerCountry" # specify country as ReviewerCountry
external_reviews$ReviewerType <- rep("External", dim(external_reviews)[1]) # add in reviewer type
external_reviews$RefereeRole <- NA
# external_reviews$RefereeRole <- "External Reviewer" # add in columns from referee - LESLIE commented thi out because I think this variable refers to something different
external_reviews <- external_reviews[,c("ProjectID", "Question", "QuestionRating", "ReviewerGender", "ReviewerID", "ReviewerType", "ReviewID", "RefereeRole", "SourcePerson",
"ReviewerCountry", "EmailEnding")] # align order with referees
### A few lines to try to get Reviewers Country from EmailEnding
IsoCountry <- ISO_3166_1[,c("Alpha_2","Name")]  #UK Is not in this data Set
IsoCountry <- rbind(IsoCountry, c(Alpha_2="UK", Name="Great Britain and Northern Ireland"))
### Using Emailending to set Country
external_reviews$EmailEnding<-toupper(external_reviews$EmailEnding)
for (i in IsoCountry$Alpha_2){ #There are some endings (.com, .edu, .. That I left with NA's)
id <- which(str_detect(external_reviews$EmailEnding,i)&is.na(external_reviews$ReviewerCountry))
id_iso <- which(str_detect(IsoCountry$Alpha_2,i)==1)
name <- IsoCountry[id_iso,2]
external_reviews$ReviewerCountry[id] <- name
}
### Clean internal reviewer data, and prepare it to be merged with external reviews data
bb_proj_id <- which(duplicated(internal_reviews$ProjectID)) # identify duplicate project ids
unique_internal_reviews <- internal_reviews[-bb_proj_id,] # make new data frame with unique project id
unique_internal_reviews$Question <- rep("OverallComparativeRanking", dim(unique_internal_reviews)[1]) # input OverallRanking into Question
unique_internal_reviews$QuestionRating <- unique_internal_reviews$OverallComparativeRanking # input overall comparative grade into questionrating column
internal_reviews <- rbind(internal_reviews, unique_internal_reviews) # rejoin data
internal_reviews <- internal_reviews[,-3] # remove overall comparative ranking column
colnames(internal_reviews)[4] <- "ReviewerGender" # update gender to specify reviewer gender
internal_reviews$ReviewerType <- rep("Internal", dim(internal_reviews)[1]) # add in reviewer type
colnames(internal_reviews)[6] <- "ReviewerID" # rename "RefereeID" to "ReviewerID" to align with external reviewer data
colnames(internal_reviews)[7] <- "ReviewID" # rename "RefereeRecommendationID" to "ReviewerID" to align with external reviewer naming
internal_reviews$SourcePerson <- "Not Applicable" # add in columns from reviews
internal_reviews$ReviewerCountry <- "Not Applicable" # add in columns from reviews
internal_reviews$EmailEnding <- "Not Applicable" # add in columns from reviews
internal_reviews <- internal_reviews[,c("ProjectID", "Question", "QuestionRating", "ReviewerGender", "ReviewerID", "ReviewerType", "ReviewID", "RefereeRole", "SourcePerson",
"ReviewerCountry", "EmailEnding")] # align column ordering with reviews
## Merge internal and external reviews
full_review_profile <- rbind(external_reviews, internal_reviews) # combine two review sources
print(length(unique(full_review_profile$ProjectID)))
### Simplify a few variable names in apps data set
colnames(apps)[colnames(apps)=="ResponsibleApplicantAcademicAgeAtSubmission"]<-"AcademicAge" # Applicant Academic age at submission. Starting on 2016-10-01
colnames(apps)[colnames(apps)=="ResponsibleApplicantAgeAtSubmission"]<-"Age"   # Applicant age at submission
colnames(apps)[colnames(apps)=="IsHasPreviousProjectRequested"] <- "PreviousRequest"   # Rename previous project Request
colnames(apps)[colnames(apps)=="ResponsibleApplicantProfessorshipType"]<- "Professorship" # Simplify name
### Convert categorical variables to factor in apps
apps$IsApproved<-as.factor(apps$IsApproved) # For Approvals
apps$Gender<-as.factor(apps$Gender) # For Gender
apps$Division<-as.factor(apps$Division) # For Division
apps$IsContinuation<-as.factor(apps$IsContinuation) # Continuation
apps$InstType<-as.factor(apps$InstType) # Institution
apps$Professorship<-as.factor(apps$Professorship) # Professorship
apps$PreviousRequest<-as.factor(apps$PreviousRequest) # PreviousRequest
### Set `NA` to zero in granted when approved = 0
id<-(is.na(apps$AmountGranted)&apps$IsApproved==0)
apps$AmountGranted[id] <- 0
### Simplify Date in apps data
apps$CallEndDate<-ymd(apps$CallEndDate)
colnames(apps)[colnames(apps)=="CallEndDate"]<- "Year"
### Merge with application information, and restrict to just 2016 data
testing_merge <- merge(full_review_profile, apps, by="ProjectID") # merges everything into one!
merged_2016<- subset(testing_merge,year(testing_merge$Year)==2016)
return(merged_2016)
}
combined <- merge_snsf_data_2016(applications = applications, reviews = reviews, referee_grades = referee_grades)
merge_snsf_data_2016 <- function(applications, reviews, referee_grades) {
library(ISOcodes)
library(stringr)
library(lubridate)
### Make a copy of data & rename it
apps <- applications # make copy of applications
external_reviews <- reviews # make copy
internal_reviews <- referee_grades # make copy
### Convert categorical variables to factors
external_reviews$Gender<-as.factor(external_reviews$Gender) # Gender
external_reviews$OverallGrade<-as.factor(external_reviews$OverallGrade) #OverallGrade
external_reviews$QuestionRating<-as.factor(external_reviews$QuestionRating) #QuestionRating
external_reviews$SourcePerson<-as.factor(external_reviews$SourcePerson) #Source Person -- Who suggested the reviewer?
### Fix obvious data errors: QuestionRating
id <- which(external_reviews$QuestionRating=="-outstanding")
external_reviews$QuestionRating[id]<-"outstanding"
### Clean up external data, and prepare it to be merged internal data
aa_proj_id <- which(duplicated(external_reviews$ProjectID)) # identify duplicate project id
unique_external_reviews <- external_reviews[-aa_proj_id,] # make new data frame removing project id
unique_external_reviews$Question <- rep("OverallGrade", dim(unique_external_reviews)[1]) # input OverallGrade as a Question
unique_external_reviews$QuestionRating <- unique_external_reviews$OverallGrade # input OverallGrade rating into QuestionRating
unique_external_reviews <- unique_external_reviews[,-c(3)] # remove "OverallGrade" column
external_reviews <- external_reviews[,-3] # remove "OverallGrade" column from original data
external_reviews <- rbind(external_reviews, unique_external_reviews) # rejoin data
colnames(external_reviews)[4] <- "ReviewerGender" # Rename gender as ReviewerGender
colnames(external_reviews)[5] <- "ReviewerCountry" # specify country as ReviewerCountry
external_reviews$ReviewerType <- rep("External", dim(external_reviews)[1]) # add in reviewer type
external_reviews$RefereeRole <- NA
# external_reviews$RefereeRole <- "External Reviewer" # add in columns from referee - LESLIE commented thi out because I think this variable refers to something different
external_reviews <- external_reviews[,c("ProjectID", "Question", "QuestionRating", "ReviewerGender", "ReviewerID", "ReviewerType", "ReviewID", "RefereeRole", "SourcePerson",
"ReviewerCountry", "EmailEnding")] # align order with referees
### A few lines to try to get Reviewers Country from EmailEnding
IsoCountry <- ISO_3166_1[,c("Alpha_2","Name")]  #UK Is not in this data Set
IsoCountry <- rbind(IsoCountry, c(Alpha_2="UK", Name="Great Britain and Northern Ireland"))
### Using Emailending to set Country
external_reviews$EmailEnding<-toupper(external_reviews$EmailEnding)
for (i in IsoCountry$Alpha_2){ #There are some endings (.com, .edu, .. That I left with NA's)
id <- which(str_detect(external_reviews$EmailEnding,i)&is.na(external_reviews$ReviewerCountry))
id_iso <- which(str_detect(IsoCountry$Alpha_2,i)==1)
name <- IsoCountry[id_iso,2]
external_reviews$ReviewerCountry[id] <- name
}
### Clean internal reviewer data, and prepare it to be merged with external reviews data
bb_proj_id <- which(duplicated(internal_reviews$ProjectID)) # identify duplicate project ids
unique_internal_reviews <- internal_reviews[-bb_proj_id,] # make new data frame with unique project id
unique_internal_reviews$Question <- rep("OverallComparativeRanking", dim(unique_internal_reviews)[1]) # input OverallRanking into Question
unique_internal_reviews$QuestionRating <- unique_internal_reviews$OverallComparativeRanking # input overall comparative grade into questionrating column
internal_reviews <- rbind(internal_reviews, unique_internal_reviews) # rejoin data
internal_reviews <- internal_reviews[,-3] # remove overall comparative ranking column
colnames(internal_reviews)[4] <- "ReviewerGender" # update gender to specify reviewer gender
internal_reviews$ReviewerType <- rep("Internal", dim(internal_reviews)[1]) # add in reviewer type
colnames(internal_reviews)[6] <- "ReviewerID" # rename "RefereeID" to "ReviewerID" to align with external reviewer data
colnames(internal_reviews)[7] <- "ReviewID" # rename "RefereeRecommendationID" to "ReviewerID" to align with external reviewer naming
internal_reviews$SourcePerson <- "Not Applicable" # add in columns from reviews
internal_reviews$ReviewerCountry <- "Not Applicable" # add in columns from reviews
internal_reviews$EmailEnding <- "Not Applicable" # add in columns from reviews
internal_reviews <- internal_reviews[,c("ProjectID", "Question", "QuestionRating", "ReviewerGender", "ReviewerID", "ReviewerType", "ReviewID", "RefereeRole", "SourcePerson",
"ReviewerCountry", "EmailEnding")] # align column ordering with reviews
## Merge internal and external reviews
full_review_profile <- rbind(external_reviews, internal_reviews) # combine two review sources
print(length(unique(full_review_profile$ProjectID)))
### Simplify a few variable names in apps data set
colnames(apps)[colnames(apps)=="ResponsibleApplicantAcademicAgeAtSubmission"]<-"AcademicAge" # Applicant Academic age at submission. Starting on 2016-10-01
colnames(apps)[colnames(apps)=="ResponsibleApplicantAgeAtSubmission"]<-"Age"   # Applicant age at submission
colnames(apps)[colnames(apps)=="IsHasPreviousProjectRequested"] <- "PreviousRequest"   # Rename previous project Request
colnames(apps)[colnames(apps)=="ResponsibleApplicantProfessorshipType"]<- "Professorship" # Simplify name
### Convert categorical variables to factor in apps
apps$IsApproved<-as.factor(apps$IsApproved) # For Approvals
apps$Gender<-as.factor(apps$Gender) # For Gender
apps$Division<-as.factor(apps$Division) # For Division
apps$IsContinuation<-as.factor(apps$IsContinuation) # Continuation
apps$InstType<-as.factor(apps$InstType) # Institution
apps$Professorship<-as.factor(apps$Professorship) # Professorship
apps$PreviousRequest<-as.factor(apps$PreviousRequest) # PreviousRequest
### Set `NA` to zero in granted when approved = 0
id<-(is.na(apps$AmountGranted)&apps$IsApproved==0)
apps$AmountGranted[id] <- 0
### Simplify Date in apps data
apps$CallEndDate<-ymd(apps$CallEndDate)
colnames(apps)[colnames(apps)=="CallEndDate"]<- "Year"
### Merge with application information, and restrict to just 2016 data
testing_merge <- merge(full_review_profile, apps, by="ProjectID") # merges everything into one!
merged_2016<- subset(testing_merge,year(testing_merge$Year)==2016)
return(merged_2016)
}
combined <- merge_snsf_data_2016(applications = applications, reviews = reviews, referee_grades = referee_grades)
length(unique(combined$ProjectID))
View(combined)
View(combined)
table(combined$Question=="OverallGrade"~combined$ProjectID)
combined$ProjectID == 10
combined[combined$ProjectID == 10,]
h <- combined[combined$ProjectID == 10,]
table(h)
table(h$QuestionRating)
table(h$QuestionRating~Question)
table(h$QuestionRating~h$Question)
table(h$QuestionRatingh$Que,stion)
table(h$QuestionRating, h$Question)
h <- combined[combined$ProjectID == 34,]
table(h$QuestionRating, h$Question)
table(h$QuestionRating, h$Question=="OverallGrade")
table(h$QuestionRating, h$Question=="Applicants' scientific track record and expertise")
h <- combined[combined$ProjectID == 34 && combined$Question=="OverallGrade",]
h
h <- combined[combined$ProjectID == 34 & combined$Question=="OverallGrade",]
h
h <- combined[combined$ProjectID == 34 & combined$Question=="OverallGrade",][1]
h
h <- combined[combined$ProjectID == 34 & combined$Question=="OverallGrade",][2]
h
h <- combined[combined$ProjectID == 34 & combined$Question=="OverallGrade",]
h[1:3,]
h
View(h)
h
h <- combined[combined$ProjectID == 34,]
h$ReviewerType
table(h$ReviewerType)
length(unique(combined$ProjectID))
length((combined$Question=="OverallGrade"))
length(combined$Question)
length(combined[combined$Question == "OverallGrade",])
dim(combined)
dim(combined[combined$Question == "OverallGrade",])
dim(combined[combined$Question == "OverallComparativeRanking",])
dim(combined[combined$Question == "OverallGrade",])
table(combined$Question=="OverallGrade")
table((combined[,"Question"]=="OverallGrade")$QuestionRating")
table((combined[,"Question"]=="OverallGrade")$QuestionRating"))
table((combined[,"Question"]=="OverallGrade")$QuestionRating")))
table((combined[,"Question"]=="OverallGrade")$QuestionRating")))
j <- combined$Question=="OverallGrade"
combined[j,]
combined[j[1:5],]
table(combined[j,])
table(combined[j,], combined$QuestionRating)
combined[k,]
combined[j,]
combined[j,3]
hist(combined[j,3])
boxplot(combined[j,3])
boxplot(as.factor(combined[j,3]))
barplot(as.factor(combined[j,3]))
table(combined[j,3])
table(combined[j,3], combined$Gender)
table(combined[j,3], combined[j,"Gender"])
?table
prop.table(combined[j,3], combined[j,"Gender"])
a ;ß table(combined[j,3], combined[j,"Gender"])
a <- table(combined[j,3], combined[j,"Gender"])
prop.table(a)
prop.table(overall_grades_by_gender, 1) # Table showing proportions
### Look at proportion of men and women receiving the different "OverallGrade" scores
overall_grades <- combined$Question=="OverallGrade"
overall_grades_by_gender <- table(combined[j,3], combined[j,"Gender"]) # Table of OverallGrade scores by gender
prop.table(overall_grades_by_gender, 1) # Table showing proportions
prop.table(overall_grades_by_gender, 1) # Table showing proportions of female & male
### Look at proportion of men and women receiving the different "OverallGrade" scores
overall_grades <- combined$Question=="OverallGrade"
overall_grades_by_gender <- table(combined[j,3], combined[j,"Gender"]) # Table of OverallGrade scores by gender
prop.table(overall_grades_by_gender, 1) # Table showing proportions of female & male
prop.table(overall_grades_by_gender, 2) # Table showing proportions of female & male
compare_ratings_by_gender <- function(data, question) {
target_question <- combined$Question==question
ratings_by_gender <- table(data[target_question,3], data[target_question,"Gender"]) # Table of Ratings by gender
proportional_ratings_by_gender <- prop.table(overall_grades_by_gender, 2) # Table showing proportions of female & male
return(list(ratings_by_gender, proportional_ratings_by_gender))
}
ab <- compare_ratings_by_gender(data = combined, question="OverallGrade")
ab
compare_ratings_by_gender <- function(data, question) { # e.g. "OverallGrade"
target_question <- combined$Question==question
ratings_by_gender <- table(data[target_question,3], data[target_question,"Gender"]) # Table of Ratings by gender
proportional_ratings_by_gender <- prop.table(ratings_by_gender, 2) # Table showing proportions of female & male
return(list(ratings_by_gender, proportional_ratings_by_gender))
}
ab <- compare_ratings_by_gender(data = combined, question="OverallGrade")
ab
ab <- compare_ratings_by_gender(data = combined, question="OverallComparativeRanking")
ab
overall_grade <- compare_ratings_by_gender(data = combined, question="OverallGrade")
ranking <- compare_ratings_by_gender(data = combined, question="Applicants' scientific track record and expertise")
ranking <- compare_ratings_by_gender(data = combined, question="OverallComparativeRanking")
overall_grade <- compare_ratings_by_gender(data = combined, question="OverallGrade")
track_record <- compare_ratings_by_gender(data = combined, question="Applicants' scientific track record and expertise")
track_record
proposal <- compare_ratings_by_gender(data = combined, question="Scientific relevance, originality and topicality")
proposal
proposal <- compare_ratings_by_gender(data = combined, question="Scientific relevance, originality and topicality")
proposal
suitability <- compare_ratings_by_gender(data = combined, question="Suitability of methods and feasibility")
suitability
ranking <- compare_ratings_by_gender(data = combined, question="OverallComparativeRanking")
ranking
suitability
overall_grade
track_record
proposal
unique(combined$Question)
unique(combined$Question)[1]
track_record
unique(combined$Question)[1]
unique(combined$Question)[2]
unique(combined$Question)[3]
proposal <- compare_ratings_by_gender(data = combined, question="Scientific relevance, originality and topicality")
proposal
unique(combined$Question)[3]
proposal <- compare_ratings_by_gender(data = combined, question=unique(combined$Question)[3])
proposal
4
unique(combined$Question)[4]
suitability <- compare_ratings_by_gender(data = combined, question=unique(combined$Question)[4])
suitability
unique(combined$Question)[4]
unique(combined$Question)[5]
int_proposal <- compare_ratings_by_gender(data = combined, question=unique(combined$Question)[5])
int_proposal
proposal
View(external_reviews)
# libraries used
library(tidyr)
library(plotly)
library(ggplot2)
library(lsmeans)
library(lubridate)
library(ISOcodes)
library(stringr)
d.apps<- function(data){
apps<-data    #make a copy
### Simplify a few variable names in apps data set
colnames(apps)[colnames(apps)=="ResponsibleApplicantAcademicAgeAtSubmission"]<-"AcademicAge" # Applicant Academic age at submission. Starting on 2016-10-01
colnames(apps)[colnames(apps)=="ResponsibleApplicantAgeAtSubmission"]<-"Age"   # Applicant age at submission
colnames(apps)[colnames(apps)=="IsHasPreviousProjectRequested"] <- "PreviousRequest"   # Rename previous project Request
colnames(apps)[colnames(apps)=="ResponsibleApplicantProfessorshipType"]<- "Professorship" # Simplify name
colnames(apps)[colnames(apps)=="NationalityIsoCode"]<- "Nationality" # Simplify name
### Convert categorical variables to factor in apps
apps$IsApproved<-as.factor(apps$IsApproved) # For Approvals
apps$Gender<-as.factor(apps$Gender) # For Gender
apps$Division<-as.factor(apps$Division) # For Division
apps$IsContinuation<-as.factor(apps$IsContinuation) # Continuation
apps$InstType<-as.factor(apps$InstType) # Institution
apps$Professorship<-as.factor(apps$Professorship) # Professorship
apps$PreviousRequest<-as.factor(apps$PreviousRequest) # PreviousRequest
### Set `NA` to zero in granted when approved = 0
id<-(is.na(apps$AmountGranted)&apps$IsApproved==0)
apps$AmountGranted[id] <- 0
### Simplify Date in apps data
apps$CallEndDate<-ymd(apps$CallEndDate)
colnames(apps)[colnames(apps)=="CallEndDate"]<- "Year"
### Simplyfy Main Disipline 2
apps<-separate(apps, MainDisciplineLevel2, c("MD Code", "MD Name"),
sep=" ",extra = "merge", fill = "right")
apps$`MD Code`<-as.factor(apps$`MD Code`)
# Drop unnecesary variables
drops <- c("MainDiscipline","CallTitle", "MD Code")
apps <- apps[ , !(names(apps) %in% drops)]
# Removed NAs for gender since we are interested in it
id.g <- which(is.na(apps$Gender))
apps <- apps[-id.g,]
# Reorder data set
apps<- apps[,c("ProjectID","Gender","Age","Nationality","AcademicAge","Professorship", "IsApproved","Year", "AmountRequested" ,
"AmountGranted", "GradeFinal","Division","MD Name","InstType",
"PreviousRequest","IsContinuation")]
return(apps)
}
d.reviews <- function(data){
external_reviews<-data  #make a copy
### Fix obvious data errors: QuestionRating
id <- which(external_reviews$QuestionRating=="-outstanding")
external_reviews$QuestionRating[id]<-"outstanding"
### Following Flabio recomendation. Ignore the "0", what do you think?
#id.o<-which(external_reviews$QuestionRating=="0")
#external_reviews<-external_reviews[-id.o,]
### Convert categorical variables to factors
external_reviews$Gender<-as.factor(external_reviews$Gender) # Gender
external_reviews$OverallGrade<-as.factor(external_reviews$OverallGrade) #OverallGrade
external_reviews$QuestionRating<-as.factor(external_reviews$QuestionRating) #QuestionRating
external_reviews$SourcePerson<-as.factor(external_reviews$SourcePerson) #Source Person -- Who suggested the reviewer?
### Simplify a few variable names in reviewers data set
colnames(external_reviews)[colnames(external_reviews)=="Gender"]<-"ReviewerGender"
colnames(external_reviews)[colnames(external_reviews)=="Country"] <- "ReviewerCountry" # specify country as ReviewerCountry
### Using Emailending to set Country
IsoCountry <- ISO_3166_1[,c("Alpha_2","Name")]  #UK Is not in this data Set
IsoCountry <- rbind(IsoCountry, c(Alpha_2="UK", Name="Great Britain and Northern Ireland"))
external_reviews$EmailEnding<-toupper(external_reviews$EmailEnding)
for (i in IsoCountry$Alpha_2){
id <- which(str_detect(external_reviews$EmailEnding,i)&is.na(external_reviews$ReviewerCountry))
id_iso <- which(str_detect(IsoCountry$Alpha_2,i)==1)
name <- IsoCountry[id_iso,2]
external_reviews$ReviewerCountry[id] <- name
}
###  Spread the Question Variable
external_reviews<-spread(external_reviews,Question,QuestionRating)
mynames<-c("OverallGrade", "SourcePerson","ReviewerGender","ReviewerCountry",
"EmailEnding","ProjectID","ReviewerID","ReviewID","ApplicantTrack","BroaderImpact",
"ScientificRelevance","Suitability")
colnames(external_reviews)<-mynames
###  Rearrenge columns
external_reviews<-external_reviews[,c("ProjectID","SourcePerson","ReviewerID","ReviewID","ReviewerGender","ReviewerCountry",
"EmailEnding","ApplicantTrack","BroaderImpact",
"ScientificRelevance","Suitability","OverallGrade")]
### Remove variables we don't care about
useless_variables <- colnames(external_reviews) %in% c("BroaderImpact")
reduced_data <- external_reviews[,!useless_variables]
return(reduced_data)
}
d.referee<-function(data){
#Make a Copy
internal_reviews<-data
# Question, Evaluation criterion. I will separete this into columns, so that we have one
# raw per reviewer per project ID
internal_reviews<-spread(internal_reviews,Question,QuestionRating)
# Simplify variable names
mynames<-c("Ranking", "RefereeRole","RefereeGender","ProjectID","RefereeID",
"RecommendationID", "ApplicantTrack", "ProjectAssesment")
names(internal_reviews)<-mynames
# Turning variables to factors
internal_reviews$Ranking<-as.factor( internal_reviews$Ranking)#Ranking
internal_reviews$RefereeRole<-as.factor(internal_reviews$RefereeRole)#Referee Role
internal_reviews$RefereeGender<-as.factor(internal_reviews$RefereeGender)#RefereeGender
internal_reviews$ApplicantTrack<-as.factor((internal_reviews$ApplicantTrack)) #ApplicantTrack
internal_reviews$ProjectAssesment<-as.factor(internal_reviews$ProjectAssesment)#Project assesmet
#Rearrenging columns
internal_reviews<-internal_reviews[,c("ProjectID","Ranking",
"RefereeID" ,"RefereeRole","RefereeGender","RecommendationID",
"ApplicantTrack","ProjectAssesment")]
return(internal_reviews)
}
load("/home/leslie/Desktop/StatsLab/snsf_data.RData")
apps2016 <- d.apps(applications)
